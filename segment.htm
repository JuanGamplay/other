<!DOCTYPE HTML><html><head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

<title>segment</title>
    <!--mark |wiz_custom_css| for wizeditor replace it-->


<style type="text/css" id="wiz_todo_style_id" wiz_link_version="01.00.09">.wiz-todo, .wiz-todo-img {width: 16px; height: 16px; cursor: default; padding: 0 10px 0 2px; vertical-align: -10%;-webkit-user-select: none;} .wiz-todo-label { display: inline-block; padding-top: 7px; padding-bottom: 6px; line-height: 1.5;} .wiz-todo-label-checked {  color: #666;} .wiz-todo-label-unchecked {text-decoration: initial;} .wiz-todo-completed-info {padding-left: 44px; display: inline-block; } .wiz-todo-avatar { width:20px; height: 20px; vertical-align: -20%; margin-right:10px; border-radius: 2px;} .wiz-todo-account, .wiz-todo-dt { color: #666; }</style>

<style id="wiz_custom_css">        html, body {            font-size: 15px;        }        body {            font-family: Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;            line-height: 1.6;            margin: 0;            padding: 20px 36px;            padding: 1.33rem 2.4rem;        }        h1, h2, h3, h4, h5, h6 {            margin: 20px 0 10px;            margin: 1.33rem 0 0.667rem;            padding: 0;            font-weight: bold;        }        h1 {            font-size: 21px;            font-size: 1.4rem;        }        h2 {            font-size: 20px;            font-size: 1.33rem;        }        h3 {            font-size: 18px;            font-size: 1.2rem;        }        h4 {            font-size: 17px;            font-size: 1.13rem;        }        h5 {            font-size: 15px;            font-size: 1rem;        }        h6 {            font-size: 15px;            font-size: 1rem;            color: #777777;            margin: 1rem 0;        }        div, p, ul, ol, dl, li {            margin: 0;        }        blockquote, table, pre, code {            margin: 8px 0;        }        ul, ol {            padding-left: 32px;            padding-left: 2.13rem;        }        blockquote {            padding: 0 12px;            padding: 0 0.8rem;        }        blockquote > :first-child {            margin-top: 0;        }        blockquote > :last-child {            margin-bottom: 0;        }        img {            border: 0;            max-width: 100%;            height: auto !important;            margin: 2px 0;        }        table {            border-collapse: collapse;            border: 1px solid #bbbbbb;        }        td {            padding: 4px 8px;            border-collapse: collapse;            border: 1px solid #bbbbbb;        }        @media screen and (max-width: 660px) {            body {                padding: 20px 18px;                padding: 1.33rem 1.2rem;            }        }        @media only screen and (-webkit-max-device-width: 1024px), only screen and (-o-max-device-width: 1024px), only screen and (max-device-width: 1024px), only screen and (-webkit-min-device-pixel-ratio: 3), only screen and (-o-min-device-pixel-ratio: 3), only screen and (min-device-pixel-ratio: 3) {            html, body {                font-size: 17px;            }            body {                line-height: 1.7;                padding: 0.75rem 0.9375rem;                color: #353c47;            }            h1 {                font-size: 2.125rem;            }            h2 {                font-size: 1.875rem;            }            h3 {                font-size: 1.625rem;            }            h4 {                font-size: 1.375rem;            }            h5 {                font-size: 1.125rem;            }            h6 {                color: inherit;            }            ul, ol {                padding-left: 2.5rem;            }            blockquote {                padding: 0 0.9375rem;            }        }</style></head>

<body style="" >unset($_Cookie); &nbsp;主意cookie和$_Cookie,session也是；<div><br></div><div><br></div><div>SEDA</div><div><p>最常见的五种创建型模式如下：</p> <ul> <li>工厂方法模式（Factory method pattern)</li> <li>抽象工厂模式（Abstract factory pattern)</li> <li>单例模式（Singleton pattern）</li> <li>建造者模式（Builder pattern）</li> <li>原型模式（Prototype pattern）</li> </ul> <h4 id="structural-pattern">结构型模式（Structural pattern）</h4> <p><a target="_blank" href="http://en.wikipedia.org/wiki/Structural_pattern">结构型模式</a>是通过定义一个简单的方法来实现和了解实体间关系，从而简化设计。</p> <ul> <li>适配器模式（Adapter pattern）</li> <li>桥接模式（Bridge pattern）</li> <li>合成模式（Composite pattern）</li> <li>装饰器模式（Decorator pattern）</li> <li>门面模式（Facade pattern）</li> <li>代理模式（Proxy pattern）</li> <li>享元模式（Flyweight Pattern）</li> </ul> <h4 id="behavioral-pattern">行为型模式（Behavioral pattern）</h4> <p><a target="_blank" href="http://en.wikipedia.org/wiki/Behavioral_pattern">行为型模式</a>用来识别对象之间的常用交流模式并加以实现，使得交流变得更加灵活。</p> <ul> <li>策略模式（Strategy pattern）</li> <li>模板方法模式（Template method pattern）</li> <li>观察者模式（Observer pattern）</li> <li>迭代器模式（Iterator pattern）</li> <li>责任链模式（Chain of responsibility pattern）</li> <li>命令模式（Command pattern）</li> <li>备忘录模式（Memento pattern）</li> <li>状态模式（State pattern）</li> <li>访问者模式（Visitor pattern）</li> <li>中介者模式（Mediator pattern）</li> <li>解释器模式（Interpreter pattern）<br><div style="color:gray"><small>来源：&nbsp;<a href="http://yansu.org/2014/04/19/design-patterns-of-php.html">http://yansu.org/2014/04/19/design-patterns-of-php.html</a></small></div></li></ul></div><div><img src="segment_files/2807c9d4-5e48-4d7c-8822-858aedc16c26.png" alt="设计模式"><br></div><div><br></div><div><br></div><div><br></div><div><img src="segment_files/d9f4407d-1a61-4d58-bb28-4b103a8aabaa.png" name=""><br></div></body></html>