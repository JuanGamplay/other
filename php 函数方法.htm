<!DOCTYPE HTML><html><head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

<!--defaultCSS-->
<title>php 函数方法</title>














<style id="wiz_custom_css">html, body {            font-size: 15px;        }        body {            font-family: Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;            line-height: 1.6;            margin: 0;            padding: 20px 15px;            padding: 1.33rem 1rem;        }        h1, h2, h3, h4, h5, h6 {            margin: 20px 0 10px;            margin: 1.33rem 0 0.667rem;            padding: 0;            font-weight: bold;        }        h1 {            font-size: 21px;            font-size: 1.4rem;        }        h2 {            font-size: 20px;            font-size: 1.33rem;        }        h3 {            font-size: 18px;            font-size: 1.2rem;        }        h4 {            font-size: 17px;            font-size: 1.13rem;        }        h5 {            font-size: 15px;            font-size: 1rem;        }        h6 {            font-size: 15px;            font-size: 1rem;            color: #777777;            margin: 1rem 0;        }        div, p, ul, ol, dl, li {            margin: 0;        }        blockquote, table, pre, code {            margin: 8px 0;        }        ul, ol {            padding-left: 32px;            padding-left: 2.13rem;        }        blockquote {            padding: 0 12px;            padding: 0 0.8rem;        }        blockquote > :first-child {            margin-top: 0;        }        blockquote > :last-child {            margin-bottom: 0;        }        img {            border: 0;            max-width: 100%;            height: auto !important;            margin: 2px 0;        }        table {            border-collapse: collapse;            border: 1px solid #bbbbbb;        }        td, th {            padding: 4px 8px;            border-collapse: collapse;            border: 1px solid #bbbbbb;			        }        @media only screen and (-webkit-max-device-width: 1024px), only screen and (-o-max-device-width: 1024px), only screen and (max-device-width: 1024px), only screen and (-webkit-min-device-pixel-ratio: 3), only screen and (-o-min-device-pixel-ratio: 3), only screen and (min-device-pixel-ratio: 3) {            html, body {                font-size: 17px;            }            body {                line-height: 1.7;                padding: 0.75rem 0.9375rem;                color: #353c47;            }            h1 {                font-size: 2.125rem;            }            h2 {                font-size: 1.875rem;            }            h3 {                font-size: 1.625rem;            }            h4 {                font-size: 1.375rem;            }            h5 {                font-size: 1.125rem;            }            h6 {                color: inherit;            }            ul, ol {                padding-left: 2.5rem;            }            blockquote {                padding: 0 0.9375rem;            }        }</style><link rel="stylesheet"  name="wiz_tmp_editor_style" href="php 函数方法_files/fonts_2.css"><link rel="stylesheet"  name="wiz_tmp_editor_style" href="php 函数方法_files/fonts_2.css"></head>

<body style="" spellcheck="false" ><div><a href="http://php.net/manual/en/function.filter-var.php">http://php.net/manual/en/function.filter-var.php</a></div><div> <br></div><div><b class="function" style="font-family: verdana, arial, helvetica, sans-serif; font-size: 13.6px; line-height: normal; widows: 1; background-color: rgb(255, 255, 255);">is_scalar()</b><span style="font-family: verdana, arial, helvetica, sans-serif; font-size: 13.6px; line-height: normal; widows: 1; background-color: rgb(255, 255, 255);">&nbsp;</span><span style="font-family: verdana, arial, helvetica, sans-serif; font-size: 13.6px; line-height: normal; widows: 1; background-color: rgb(255, 255, 255);">标量变量是指那些包含了&nbsp;</span><a href="http://www.kuqin.com/php5_doc/language.types.integer.html" style="color: rgb(0, 0, 153); font-family: verdana, arial, helvetica, sans-serif; font-size: 13.6px; line-height: normal; widows: 1; background-color: rgb(255, 255, 255);"><b class="type">integer</b></a><span style="font-family: verdana, arial, helvetica, sans-serif; font-size: 13.6px; line-height: normal; widows: 1; background-color: rgb(255, 255, 255);">、</span><a href="http://www.kuqin.com/php5_doc/language.types.float.html" style="color: rgb(0, 0, 153); font-family: verdana, arial, helvetica, sans-serif; font-size: 13.6px; line-height: normal; widows: 1; background-color: rgb(255, 255, 255);"><b class="type">float</b></a><span style="font-family: verdana, arial, helvetica, sans-serif; font-size: 13.6px; line-height: normal; widows: 1; background-color: rgb(255, 255, 255);">、</span><a href="http://www.kuqin.com/php5_doc/language.types.string.html" style="color: rgb(0, 0, 153); font-family: verdana, arial, helvetica, sans-serif; font-size: 13.6px; line-height: normal; widows: 1; background-color: rgb(255, 255, 255);"><b class="type">string</b></a><span style="font-family: verdana, arial, helvetica, sans-serif; font-size: 13.6px; line-height: normal; widows: 1; background-color: rgb(255, 255, 255);">&nbsp;或&nbsp;</span><a href="http://www.kuqin.com/php5_doc/language.types.boolean.html" style="color: rgb(0, 0, 153); font-family: verdana, arial, helvetica, sans-serif; font-size: 13.6px; line-height: normal; widows: 1; background-color: rgb(255, 255, 255);"><b class="type">boolean</b></a><span style="font-family: verdana, arial, helvetica, sans-serif; font-size: 13.6px; line-height: normal; widows: 1; background-color: rgb(255, 255, 255);">的变量，而&nbsp;</span><a href="http://www.kuqin.com/php5_doc/language.types.array.html" style="color: rgb(0, 0, 153); font-family: verdana, arial, helvetica, sans-serif; font-size: 13.6px; line-height: normal; widows: 1; background-color: rgb(255, 255, 255);"><b class="type">array</b></a><span style="font-family: verdana, arial, helvetica, sans-serif; font-size: 13.6px; line-height: normal; widows: 1; background-color: rgb(255, 255, 255);">、</span><a href="http://www.kuqin.com/php5_doc/language.types.object.html" style="color: rgb(0, 0, 153); font-family: verdana, arial, helvetica, sans-serif; font-size: 13.6px; line-height: normal; widows: 1; background-color: rgb(255, 255, 255);"><b class="type">object</b></a><span style="font-family: verdana, arial, helvetica, sans-serif; font-size: 13.6px; line-height: normal; widows: 1; background-color: rgb(255, 255, 255);">&nbsp;和&nbsp;</span><a href="http://www.kuqin.com/php5_doc/language.types.resource.html" style="color: rgb(0, 0, 153); font-family: verdana, arial, helvetica, sans-serif; font-size: 13.6px; line-height: normal; widows: 1; background-color: rgb(255, 255, 255);"><b class="type">resource</b></a><span style="font-family: verdana, arial, helvetica, sans-serif; font-size: 13.6px; line-height: normal; widows: 1; background-color: rgb(255, 255, 255);">&nbsp;则不是标量。</span><br></div><a href="http://php.net/manual/zh/ref.pcre.php" style="border-bottom-width: 1px; border-bottom-style: solid; border-color: rgb(174, 80, 141); text-decoration: none; outline: 0px; color: rgb(174, 80, 141); font-family: 'Fira Sans', 'Source Sans Pro', Helvetica, Arial, sans-serif; font-size: 16px; line-height: 24px; widows: 1; background-color: rgb(242, 242, 242);">PCRE 函数</a><div><ul class="chunklist chunklist_book chunklist_children" style="margin: 0px 0px 1.5rem 1.5rem; padding: 0px; color: rgb(51, 51, 51); font-family: 'Fira Sans', 'Source Sans Pro', Helvetica, Arial, sans-serif; font-size: 16px; line-height: 24px; widows: 1; background-color: rgb(242, 242, 242);"><li><a href="http://php.net/manual/zh/function.preg-filter.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">preg_filter</a>&nbsp;— 执行一个正则表达式搜索和替换</li><li><a href="http://php.net/manual/zh/function.preg-grep.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">preg_grep</a>&nbsp;— 返回匹配模式的数组条目</li><li><a href="http://php.net/manual/zh/function.preg-last-error.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">preg_last_error</a>&nbsp;— 返回最后一个PCRE正则执行产生的错误代码</li><li><a href="http://php.net/manual/zh/function.preg-match-all.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">preg_match_all</a>&nbsp;— 执行一个全局正则表达式匹配</li><li><a href="http://php.net/manual/zh/function.preg-match.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">preg_match</a>&nbsp;— 执行一个正则表达式匹配</li><li><a href="http://php.net/manual/zh/function.preg-quote.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">preg_quote</a>&nbsp;— 转义正则表达式字符</li><li><a href="http://php.net/manual/zh/function.preg-replace-callback-array.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">preg_replace_callback_array</a>&nbsp;— Perform a regular expression search and replace using callbacks</li><li><a href="http://php.net/manual/zh/function.preg-replace-callback.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">preg_replace_callback</a>&nbsp;— 执行一个正则表达式搜索并且使用一个回调进行替换</li><li><a href="http://php.net/manual/zh/function.preg-replace.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">preg_replace</a>&nbsp;— 执行一个正则表达式的搜索和替换</li><li><a href="http://php.net/manual/zh/function.preg-split.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">preg_split</a>&nbsp;— 通过一个正则表达式分隔字符串<br><div style="color: gray;"><small>来源：&nbsp;&lt;<a href="http://php.net/manual/zh/book.pcre.php">http://php.net/manual/zh/book.pcre.php</a><small>&gt;</small></small></div><small><small>&nbsp;</small></small></li></ul><div><a href="http://php.net/manual/zh/function.sprintf.php">http://php.net/manual/zh/function.sprintf.php</a></div><div><div><br></div><ul class="simplelist" style="margin: 0px 0px 1.5rem 1.5rem; padding: 0px; color: rgb(51, 51, 51); font-family: 'Fira Sans', 'Source Sans Pro', Helvetica, Arial, sans-serif; font-size: 16px; line-height: 24px; widows: 1; background-color: rgb(242, 242, 242);"><li class="member"><span class="function"><a href="http://php.net/manual/zh/function.str-split.php" class="function" rel="rdfs-seeAlso" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">str_split()</a>&nbsp;- 将字符串转换为数组</span></li><li class="member"><span class="function"><a href="http://php.net/manual/zh/function.mb-split.php" class="function" rel="rdfs-seeAlso" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">mb_split()</a>&nbsp;- 使用正则表达式分割多字节字符串</span></li><li class="member"><span class="function"><a href="http://php.net/manual/zh/function.strtok.php" class="function" rel="rdfs-seeAlso" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">strtok()</a>&nbsp;- 标记分割字符串</span></li><li class="member"><span class="function"><a href="http://php.net/manual/zh/function.implode.php" class="function" rel="rdfs-seeAlso" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">implode()</a>&nbsp;- 将一个一维数组的值转化为字符串</span></li><li class="member"><span class="function"><span class="refname">explode</span>&nbsp;—&nbsp;<span class="dc-title">使用一个字符串分割另一个字符串</span><br></span></li><li><a href="http://php.net/manual/zh/function.str-replace.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">str_replace</a>&nbsp;— 子字符串替换</li></ul><div style="widows: 1;"><span class="default" style="color: rgb(51, 102, 153); font-family: 'Fira Mono', 'Source Code Pro', monospace; font-size: 14px; line-height: 24px; background-color: rgb(255, 255, 255);">preg_split</span><span class="keyword" style="color: rgb(102, 153, 51); font-family: 'Fira Mono', 'Source Code Pro', monospace; font-size: 14px; line-height: 24px; background-color: rgb(255, 255, 255);">(</span><span class="string" style="color: rgb(204, 51, 51); font-family: 'Fira Mono', 'Source Code Pro', monospace; font-size: 14px; line-height: 24px; background-color: rgb(255, 255, 255);">'/(?&lt;!^)(?!$)/u'</span><span class="keyword" style="color: rgb(102, 153, 51); font-family: 'Fira Mono', 'Source Code Pro', monospace; font-size: 14px; line-height: 24px; background-color: rgb(255, 255, 255);">,&nbsp;</span><span class="default" style="color: rgb(51, 102, 153); font-family: 'Fira Mono', 'Source Code Pro', monospace; font-size: 14px; line-height: 24px; background-color: rgb(255, 255, 255);">$string&nbsp;</span><span class="keyword" style="color: rgb(102, 153, 51); font-family: 'Fira Mono', 'Source Code Pro', monospace; font-size: 14px; line-height: 24px; background-color: rgb(255, 255, 255);">);&nbsp;</span><font color="#333333" face="Fira Sans, Source Sans Pro, Helvetica, Arial, sans-serif" size="3"><span style="line-height: 24px;"><br></span></font></div></div></div><div style="widows: 1;"><span class="keyword" style="color: rgb(102, 153, 51); font-family: 'Fira Mono', 'Source Code Pro', monospace; font-size: 14px; line-height: 24px; background-color: rgb(255, 255, 255);"><br></span></div><div style="widows: 1;"><span class="keyword" style="color: rgb(102, 153, 51); font-family: 'Fira Mono', 'Source Code Pro', monospace; font-size: 14px; line-height: 24px; background-color: rgb(255, 255, 255);"><h1 class="refname" style="margin-top: 0px; margin-bottom: 1.5rem; font-weight: 500; font-size: 1.75rem; line-height: 3rem; overflow: hidden; text-rendering: optimizelegibility; color: rgb(121, 56, 98); font-family: 'Fira Sans', 'Source Sans Pro', Helvetica, Arial, sans-serif; background-color: rgb(242, 242, 242);">sprintf &nbsp; d 整数 &nbsp;s 字符串</h1><div style="color: rgb(0, 0, 0); font-family: Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif; line-height: 32px;"><ul class="chunklist chunklist_book chunklist_children" style="margin-bottom: 1.5rem; margin-left: 1.5rem; padding: 0px; color: rgb(51, 51, 51); font-family: 'Fira Sans', 'Source Sans Pro', Helvetica, Arial, sans-serif; font-size: 16px; line-height: 24px; background-color: rgb(242, 242, 242);"><li><a href="http://php.net/manual/zh/function.printf.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">printf</a>&nbsp;— 输出格式化字符串<br></li><li><a href="http://php.net/manual/zh/function.sprintf.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">sprintf</a>&nbsp;—返回输出格式化字符串</li><li><a href="http://php.net/manual/zh/function.vprintf.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">vprintf</a>&nbsp;— 输出格式化字符串 数组</li><li><a href="http://php.net/manual/zh/function.vsprintf.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">vsprintf</a>&nbsp;— 返回格式化字符串</li><li><a href="http://php.net/manual/zh/function.vfprintf.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">vfprintf</a>&nbsp;— 将格式化字符串写入流</li><li><a href="http://php.net/manual/zh/function.fprintf.php" style="border-bottom-width: 1px; border-bottom-style: solid; border-color: rgb(174, 80, 141); text-decoration: none; outline: 0px; color: rgb(174, 80, 141);">fprintf</a>&nbsp;— 将格式化后的字符串写入到流</li><li class="member"><span class="function"><a href="http://php.net/manual/zh/function.sscanf.php" class="function" rel="rdfs-seeAlso" style="border-bottom-width: 1px; border-bottom-style: solid; border-color: rgb(174, 80, 141); text-decoration: none; outline: 0px; outline-offset: -2px; color: rgb(174, 80, 141);">sscanf()</a>&nbsp;- 根据指定格式解析输入的字符</span></li><li class="member"><span class="function"><a href="http://php.net/manual/zh/function.fscanf.php" class="function" rel="rdfs-seeAlso" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">fscanf()</a>&nbsp;- 从文件中格式化输入</span></li></ul></div></span></div><div style="widows: 1;"><ul class="chunklist chunklist_reference" style="margin-bottom: 1.5rem; margin-left: 1.5rem; padding: 0px; color: rgb(51, 51, 51); font-family: 'Fira Sans', 'Source Sans Pro', Helvetica, Arial, sans-serif; font-size: 16px; line-height: 24px; background-color: rgb(242, 242, 242);"><li><br></li><li><a href="http://php.net/manual/zh/function.addslashes.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">addslashes</a>&nbsp;— 使用反斜线引用字符串</li><li><br></li><li><br></li><li><a href="http://php.net/manual/zh/function.chr.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">chr</a>&nbsp;— 返回指定的字符</li><li><a href="http://php.net/manual/zh/function.chunk-split.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">chunk_split</a>&nbsp;— 将字符串分割成小块</li><li><br></li><li><a href="http://php.net/manual/zh/function.count-chars.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">count_chars</a>&nbsp;— 返回字符串所用字符的信息</li><li><a href="http://php.net/manual/zh/function.crc32.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">crc32</a>&nbsp;— 计算一个字符串的 crc32 多项式</li><li><a href="http://php.net/manual/zh/function.crypt.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">crypt</a>&nbsp;— 单向字符串散列</li><li><a href="http://php.net/manual/zh/function.echo.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">echo</a>&nbsp;— 输出一个或多个字符串</li><li><a href="http://php.net/manual/zh/function.explode.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">explode</a>&nbsp;— 使用一个字符串分割另一个字符串</li><li><br></li><li><br></li><li><br></li><li><br></li><li><a href="http://php.net/manual/zh/function.htmlentities.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">htmlentities</a>&nbsp;— Convert all applicable characters to HTML entities</li><li><a href="http://php.net/manual/zh/function.htmlspecialchars-decode.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">htmlspecialchars_decode</a>&nbsp;— 将特殊的 HTML 实体转换回普通字符</li><li><a href="http://php.net/manual/zh/function.htmlspecialchars.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">htmlspecialchars</a>&nbsp;— Convert special characters to HTML entities</li><li><a href="http://php.net/manual/zh/function.implode.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">implode</a>&nbsp;— 将一个一维数组的值转化为字符串</li><li><br></li><li><a href="http://php.net/manual/zh/function.lcfirst.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">lcfirst</a>&nbsp;— 使一个字符串的第一个字符小写</li><li><br></li><li><br></li><li><a href="http://php.net/manual/zh/function.ltrim.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">ltrim</a>&nbsp;— 删除字符串开头的空白字符（或其他字符）</li><li><a href="http://php.net/manual/zh/function.md5-file.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">md5_file</a>&nbsp;— 计算指定文件的 MD5 散列值</li><li><a href="http://php.net/manual/zh/function.md5.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">md5</a>&nbsp;— 计算字符串的 MD5 散列值</li><li><br></li><li><a href="http://php.net/manual/zh/function.money-format.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">money_format</a>&nbsp;— Formats a number as a currency string</li><li><a href="http://php.net/manual/zh/function.nl-langinfo.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">nl_langinfo</a>&nbsp;— Query language and locale information</li><li><a href="http://php.net/manual/zh/function.nl2br.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">nl2br</a>&nbsp;— 在字符串所有新行之前插入 HTML 换行标记</li><li><a href="http://php.net/manual/zh/function.number-format.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">number_format</a>&nbsp;— 以千位分隔符方式格式化一个数字</li><li><a href="http://php.net/manual/zh/function.ord.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">ord</a>&nbsp;— 返回字符的 ASCII 码值</li><li><a href="http://php.net/manual/zh/function.parse-str.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">parse_str</a>&nbsp;— 将字符串解析成多个变量</li><li><a href="http://php.net/manual/zh/function.print.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">print</a>&nbsp;— 输出字符串</li><li><a href="http://php.net/manual/zh/function.printf.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">printf</a>&nbsp;— 输出格式化字符串</li><li><br></li><li><br></li><li><a href="http://php.net/manual/zh/function.rtrim.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">rtrim</a>&nbsp;— 删除字符串末端的空白字符（或者其他字符）</li><li><a href="http://php.net/manual/zh/function.setlocale.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">setlocale</a>&nbsp;— 设置地区信息</li><li><a href="http://php.net/manual/zh/function.sha1-file.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">sha1_file</a>&nbsp;— 计算文件的 sha1 散列值</li><li><a href="http://php.net/manual/zh/function.sha1.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">sha1</a>&nbsp;— 计算字符串的 sha1 散列值</li><li><a href="http://php.net/manual/zh/function.similar-text.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">similar_text</a>&nbsp;— 计算两个字符串的相似度</li><li><a href="http://php.net/manual/zh/function.soundex.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">soundex</a>&nbsp;— Calculate the soundex key of a string</li><li><a href="http://php.net/manual/zh/function.sprintf.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">sprintf</a>&nbsp;— Return a formatted string</li><li><a href="http://php.net/manual/zh/function.sscanf.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">sscanf</a>&nbsp;— 根据指定格式解析输入的字符</li><li><a href="http://php.net/manual/zh/function.str-getcsv.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">str_getcsv</a>&nbsp;— 解析 CSV 字符串为一个数组</li><li><a href="http://php.net/manual/zh/function.str-ireplace.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">str_ireplace</a>&nbsp;— str_replace 的忽略大小写版本</li><li><a href="http://php.net/manual/zh/function.str-pad.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">str_pad</a>&nbsp;— 使用另一个字符串填充字符串为指定长度</li><li><a href="http://php.net/manual/zh/function.str-repeat.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">str_repeat</a>&nbsp;— 重复一个字符串</li><li><a href="http://php.net/manual/zh/function.str-shuffle.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">str_shuffle</a>&nbsp;— 随机打乱一个字符串</li><li><a href="http://php.net/manual/zh/function.str-split.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">str_split</a>&nbsp;— 将字符串转换为数组</li><li><a href="http://php.net/manual/zh/function.strcmp.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">strcmp</a>&nbsp;— 二进制安全字符串比较</li><li><a href="http://php.net/manual/zh/function.strip-tags.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">strip_tags</a>&nbsp;— 从字符串中去除 HTML 和 PHP 标记</li><li><a href="http://php.net/manual/zh/function.stripos.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">stripos</a>&nbsp;— 查找字符串首次出现的位置（不区分大小写）</li><li><a href="http://php.net/manual/zh/function.stripslashes.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">stripslashes</a>&nbsp;— 反引用一个引用字符串</li><li><a href="http://php.net/manual/zh/function.stristr.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">stristr</a>&nbsp;— strstr 函数的忽略大小写版本</li><li><a href="http://php.net/manual/zh/function.strlen.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">strlen</a>&nbsp;— 获取字符串长度</li><li><a href="http://php.net/manual/zh/function.strpbrk.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">strpbrk</a>&nbsp;— 在字符串中查找一组字符的任何一个字符</li><li><a href="http://php.net/manual/zh/function.strpos.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">strpos</a>&nbsp;— 查找字符串首次出现的位置</li><li><a href="http://php.net/manual/zh/function.strrchr.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">strrchr</a>&nbsp;— 查找指定字符在字符串中的最后一次出现</li><li><a href="http://php.net/manual/zh/function.strrev.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">strrev</a>&nbsp;— 反转字符串</li><li><a href="http://php.net/manual/zh/function.strripos.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">strripos</a>&nbsp;— 计算指定字符串在目标字符串中最后一次出现的位置（不区分大小写）</li><li><a href="http://php.net/manual/zh/function.strrpos.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">strrpos</a>&nbsp;— 计算指定字符串在目标字符串中最后一次出现的位置</li><li><a href="http://php.net/manual/zh/function.strstr.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">strstr</a>&nbsp;— 查找字符串的首次出现</li><li><a href="http://php.net/manual/zh/function.strtok.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">strtok</a>&nbsp;— 标记分割字符串</li><li><a href="http://php.net/manual/zh/function.strtolower.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">strtolower</a>&nbsp;— 将字符串转化为小写</li><li><a href="http://php.net/manual/zh/function.strtoupper.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">strtoupper</a>&nbsp;— 将字符串转化为大写</li><li><a href="http://php.net/manual/zh/function.strtr.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">strtr</a>&nbsp;— 转换指定字符</li><li><a href="http://php.net/manual/zh/function.substr-count.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">substr_count</a>&nbsp;— 计算字串出现的次数</li><li><a href="http://php.net/manual/zh/function.substr-replace.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">substr_replace</a>&nbsp;— 替换字符串的子串</li><li><a href="http://php.net/manual/zh/function.substr.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">substr</a>&nbsp;— 返回字符串的子串</li><li><a href="http://php.net/manual/zh/function.trim.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">trim</a>&nbsp;— 去除字符串首尾处的空白字符（或者其他字符）</li><li><a href="http://php.net/manual/zh/function.ucfirst.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">ucfirst</a>&nbsp;— 将字符串的首字母转换为大写</li><li><a href="http://php.net/manual/zh/function.ucwords.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">ucwords</a>&nbsp;— 将字符串中每个单词的首字母转换为大写</li><li><br></li><li><div style="color:gray"><br></div></li></ul></div><div style="widows: 1;"><a href="http://php.net/manual/zh/ref.array.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153); font-family: 'Fira Sans', 'Source Sans Pro', Helvetica, Arial, sans-serif; font-size: 16px; line-height: 24px; background-color: rgb(242, 242, 242);">数组 函数</a><ul class="chunklist chunklist_book chunklist_children" style="margin-bottom: 1.5rem; margin-left: 1.5rem; padding: 0px; color: rgb(51, 51, 51); font-family: 'Fira Sans', 'Source Sans Pro', Helvetica, Arial, sans-serif; font-size: 16px; line-height: 24px; background-color: rgb(242, 242, 242);"><li><a href="http://php.net/manual/zh/function.array-chunk.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">array_chunk</a>&nbsp;— 将一个数组分割成多个</li><li><a href="http://php.net/manual/zh/function.array-column.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">array_column</a>&nbsp;— 返回数组中指定的一列</li><li><a href="http://php.net/manual/zh/function.array-combine.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">array_combine</a>&nbsp;— 创建一个数组，用一个数组的值作为其键名，另一个数组的值作为其值</li><li><a href="http://php.net/manual/zh/function.array-count-values.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">array_count_values</a>&nbsp;— 统计数组中所有的值出现的次数</li><li><br></li><li><a href="http://php.net/manual/zh/function.array-diff-uassoc.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">array_diff_uassoc</a>&nbsp;— 用用户提供的回调函数做索引检查来计算数组的差集</li><li><a href="http://php.net/manual/zh/function.array-diff-ukey.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">array_diff_ukey</a>&nbsp;— 用回调函数对键名比较计算数组的差集</li><li><br></li><li><a href="http://php.net/manual/zh/function.array-filter.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">array_filter</a>&nbsp;— 用回调函数过滤数组中的单元</li><li><a href="http://php.net/manual/zh/function.array-flip.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">array_flip</a>&nbsp;— 交换数组中的键和值</li><li><br></li><li><a href="http://php.net/manual/zh/function.array-intersect.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">array_intersect</a>&nbsp;— 计算数组的交集</li><li><a href="http://php.net/manual/zh/function.array-key-exists.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">array_key_exists</a>&nbsp;— 检查给定的键名或索引是否存在于数组中</li><li><br></li><li><a href="http://php.net/manual/zh/function.array-merge.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">array_merge</a>&nbsp;— 合并一个或多个数组</li><li><br></li><li><br></li><li><a href="http://php.net/manual/zh/function.array-pop.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">array_pop</a>&nbsp;— 将数组最后一个单元弹出（出栈）</li><li><a href="http://php.net/manual/zh/function.array-product.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">array_product</a>&nbsp;— 计算数组中所有值的乘积</li><li><a href="http://php.net/manual/zh/function.array-push.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">array_push</a>&nbsp;— 将一个或多个单元压入数组的末尾（入栈）</li><li><a href="http://php.net/manual/zh/function.array-rand.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">array_rand</a>&nbsp;— 从数组中随机取出一个或多个单元</li><li><a href="http://php.net/manual/zh/function.array-reduce.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">array_reduce</a>&nbsp;— 用回调函数迭代地将数组简化为单一的值</li><li><a href="http://php.net/manual/zh/function.array-replace-recursive.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">array_replace_recursive</a>&nbsp;— 使用传递的数组递归替换第一个数组的元素</li><li><a href="http://php.net/manual/zh/function.array-replace.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">array_replace</a>&nbsp;— 使用传递的数组替换第一个数组的元素</li><li><a href="http://php.net/manual/zh/function.array-reverse.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">array_reverse</a>&nbsp;— 返回一个单元顺序相反的数组</li><li><a href="http://php.net/manual/zh/function.array-search.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">array_search</a>&nbsp;— 在数组中搜索给定的值，如果成功则返回相应的键名</li><li><a href="http://php.net/manual/zh/function.array-shift.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">array_shift</a>&nbsp;— 将数组开头的单元移出数组</li><li><a href="http://php.net/manual/zh/function.array-slice.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">array_slice</a>&nbsp;— 从数组中取出一段</li><li><a href="http://php.net/manual/zh/function.array-splice.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">array_splice</a>&nbsp;— 把数组中的一部分去掉并用其它值取代</li><li><a href="http://php.net/manual/zh/function.array-sum.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">array_sum</a>&nbsp;— 计算数组中所有值的和</li><li><a href="http://php.net/manual/zh/function.array-udiff-assoc.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">array_udiff_assoc</a>&nbsp;— 带索引检查计算数组的差集，用回调函数比较数据</li><li><a href="http://php.net/manual/zh/function.array-udiff-uassoc.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">array_udiff_uassoc</a>&nbsp;— 带索引检查计算数组的差集，用回调函数比较数据和索引</li><li><a href="http://php.net/manual/zh/function.array-udiff.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">array_udiff</a>&nbsp;— 用回调函数比较数据来计算数组的差集</li><li><br></li><li><a href="http://php.net/manual/zh/function.array-uintersect.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">array_uintersect</a>&nbsp;— 计算数组的交集，用回调函数比较数据</li><li><a href="http://php.net/manual/zh/function.array-unique.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">array_unique</a>&nbsp;— 移除数组中重复的值</li><li><a href="http://php.net/manual/zh/function.array-unshift.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">array_unshift</a>&nbsp;— 在数组开头插入一个或多个单元</li><li><a href="http://php.net/manual/zh/function.array-values.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">array_values</a>&nbsp;— 返回数组中所有的值</li><li><a href="http://php.net/manual/zh/function.array-walk-recursive.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">array_walk_recursive</a>&nbsp;— 对数组中的每个成员递归地应用用户函数</li><li><a href="http://php.net/manual/zh/function.array-walk.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">array_walk</a>&nbsp;— 使用用户自定义函数对数组中的每个元素做回调处理</li><li><a href="http://php.net/manual/zh/function.array.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">array</a>&nbsp;— 新建一个数组</li><li><a href="http://php.net/manual/zh/function.arsort.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">arsort</a>&nbsp;— 对数组进行逆向排序并保持索引关系</li><li><a href="http://php.net/manual/zh/function.asort.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">asort</a>&nbsp;— 对数组进行排序并保持索引关系</li><li><a href="http://php.net/manual/zh/function.compact.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">compact</a>&nbsp;— 建立一个数组，包括变量名和它们的值</li><li><a href="http://php.net/manual/zh/function.count.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">count</a>&nbsp;— 计算数组中的单元数目或对象中的属性个数</li><li><a href="http://php.net/manual/zh/function.current.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">current</a>&nbsp;— 返回数组中的当前单元</li><li><a href="http://php.net/manual/zh/function.each.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">each</a>&nbsp;— 返回数组中当前的键／值对并将数组指针向前移动一步</li><li><a href="http://php.net/manual/zh/function.end.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">end</a>&nbsp;— 将数组的内部指针指向最后一个单元</li><li><a href="http://php.net/manual/zh/function.extract.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">extract</a>&nbsp;— 从数组中将变量导入到当前的符号表</li><li><a href="http://php.net/manual/zh/function.in-array.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">in_array</a>&nbsp;— 检查数组中是否存在某个值</li><li><a href="http://php.net/manual/zh/function.key-exists.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">key_exists</a>&nbsp;— 别名 array_key_exists</li><li><a href="http://php.net/manual/zh/function.key.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">key</a>&nbsp;— 从关联数组中取得键名</li><li><a href="http://php.net/manual/zh/function.krsort.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">krsort</a>&nbsp;— 对数组按照键名逆向排序</li><li><a href="http://php.net/manual/zh/function.ksort.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">ksort</a>&nbsp;— 对数组按照键名排序</li><li><a href="http://php.net/manual/zh/function.list.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">list</a>&nbsp;— 把数组中的值赋给一些变量</li><li><a href="http://php.net/manual/zh/function.natcasesort.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">natcasesort</a>&nbsp;— 用“自然排序”算法对数组进行不区分大小写字母的排序</li><li><a href="http://php.net/manual/zh/function.natsort.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">natsort</a>&nbsp;— 用“自然排序”算法对数组排序</li><li><a href="http://php.net/manual/zh/function.next.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">next</a>&nbsp;— 将数组中的内部指针向前移动一位</li><li><a href="http://php.net/manual/zh/function.pos.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">pos</a>&nbsp;— current 的别名</li><li><a href="http://php.net/manual/zh/function.prev.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">prev</a>&nbsp;— 将数组的内部指针倒回一位</li><li><a href="http://php.net/manual/zh/function.range.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">range</a>&nbsp;— 建立一个包含指定范围单元的数组</li><li><a href="http://php.net/manual/zh/function.reset.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">reset</a>&nbsp;— 将数组的内部指针指向第一个单元</li><li><a href="http://php.net/manual/zh/function.rsort.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">rsort</a>&nbsp;— 对数组逆向排序</li><li><a href="http://php.net/manual/zh/function.shuffle.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">shuffle</a>&nbsp;— 将数组打乱</li><li><a href="http://php.net/manual/zh/function.sizeof.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">sizeof</a>&nbsp;— count 的别名</li><li><a href="http://php.net/manual/zh/function.sort.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">sort</a>&nbsp;— 对数组排序</li><li><a href="http://php.net/manual/zh/function.uasort.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">uasort</a>&nbsp;— 使用用户自定义的比较函数对数组中的值进行排序并保持索引关联</li><li><a href="http://php.net/manual/zh/function.uksort.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">uksort</a>&nbsp;— 使用用户自定义的比较函数对数组中的键名进行排序</li><li><a href="http://php.net/manual/zh/function.usort.php" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">usort</a>&nbsp;— 使用用户自定义的比较函数对数组中的值进行排序<br><div style="color:gray"><small>来源：&nbsp;<a href="http://php.net/manual/zh/book.array.php">http://php.net/manual/zh/book.array.php</a></small></div></li></ul></div><div style="widows: 1;"><dt style="color: rgb(51, 51, 51); font-family: 'Fira Sans', 'Source Sans Pro', Helvetica, Arial, sans-serif; font-size: 16px; line-height: 24px; background-color: rgb(242, 242, 242);"><em class="emphasis" style="text-rendering: optimizelegibility;">i 忽略大小写 &nbsp;s &nbsp;.能匹配换行 &nbsp;U &nbsp;非贪婪，？。</em></dt><dt style="color: rgb(51, 51, 51); font-family: 'Fira Sans', 'Source Sans Pro', Helvetica, Arial, sans-serif; font-size: 16px; line-height: 24px; background-color: rgb(242, 242, 242);">i&nbsp;(<em style="text-rendering: optimizelegibility;">PCRE_CASELESS</em>)</dt><dd style="margin: 0px 0px 1.5rem; padding: 0px 1.5rem; color: rgb(51, 51, 51); font-family: 'Fira Sans', 'Source Sans Pro', Helvetica, Arial, sans-serif; font-size: 16px; line-height: 24px; background-color: rgb(242, 242, 242);"><span class="simpara">如果设置了这个修饰符，模式中的字母会进行大小写不敏感匹配。</span></dd><dt style="color: rgb(51, 51, 51); font-family: 'Fira Sans', 'Source Sans Pro', Helvetica, Arial, sans-serif; font-size: 16px; line-height: 24px; background-color: rgb(242, 242, 242);"><em class="emphasis" style="text-rendering: optimizelegibility;">m</em>&nbsp;(<em style="text-rendering: optimizelegibility;">PCRE_MULTILINE</em>)</dt><dd style="margin: 0px 0px 1.5rem; padding: 0px 1.5rem; color: rgb(51, 51, 51); font-family: 'Fira Sans', 'Source Sans Pro', Helvetica, Arial, sans-serif; font-size: 16px; line-height: 24px; background-color: rgb(242, 242, 242);"><span class="simpara">默认情况下，PCRE 认为目标字符串是由单行字符组成的(然而实际上它可能会包含多行)， "行首"元字符 (^) 仅匹配字符串的开始位置， 而"行末"元字符 ($) 仅匹配字符串末尾， 或者最后的换行符(除非设置了&nbsp;<em class="emphasis" style="text-rendering: optimizelegibility;">D</em>&nbsp;修饰符)。这个行为和 perl 相同。&nbsp;</span><span class="simpara">当这个修饰符设置之后，“行首”和“行末”就会匹配目标字符串中任意换行符之前或之后，另外， 还分别匹配目标字符串的最开始和最末尾位置。这等同于 perl 的 /m 修饰符。如果目标字符串 中没有 "\n" 字符，或者模式中没有出现 ^ 或 $，设置这个修饰符不产生任何影响。</span></dd><dt style="color: rgb(51, 51, 51); font-family: 'Fira Sans', 'Source Sans Pro', Helvetica, Arial, sans-serif; font-size: 16px; line-height: 24px; background-color: rgb(242, 242, 242);"><em class="emphasis" style="text-rendering: optimizelegibility;">s</em>&nbsp;(<em style="text-rendering: optimizelegibility;">PCRE_DOTALL</em>)</dt><dd style="margin: 0px 0px 1.5rem; padding: 0px 1.5rem; color: rgb(51, 51, 51); font-family: 'Fira Sans', 'Source Sans Pro', Helvetica, Arial, sans-serif; font-size: 16px; line-height: 24px; background-color: rgb(242, 242, 242);"><span class="simpara">如果设置了这个修饰符，模式中的点号元字符匹配所有字符，包含换行符。如果没有这个 修饰符，点号不匹配换行符。这个修饰符等同于 perl 中的/s修饰符。 一个取反字符类比如 [^a] 总是匹配换行符，而不依赖于这个修饰符的设置。</span></dd><dt style="color: rgb(51, 51, 51); font-family: 'Fira Sans', 'Source Sans Pro', Helvetica, Arial, sans-serif; font-size: 16px; line-height: 24px; background-color: rgb(242, 242, 242);"><em class="emphasis" style="text-rendering: optimizelegibility;">x</em>&nbsp;(<em style="text-rendering: optimizelegibility;">PCRE_EXTENDED</em>)</dt><dd style="margin: 0px 0px 1.5rem; padding: 0px 1.5rem; color: rgb(51, 51, 51); font-family: 'Fira Sans', 'Source Sans Pro', Helvetica, Arial, sans-serif; font-size: 16px; line-height: 24px; background-color: rgb(242, 242, 242);"><span class="simpara">如果设置了这个修饰符，模式中的没有经过转义的或不在字符类中的空白数据字符总会被忽略， 并且位于一个未转义的字符类外部的#字符和下一个换行符之间的字符也被忽略。 这个修饰符 等同于 perl 中的 /x 修饰符，使被编译模式中可以包含注释。 注意：这仅用于数据字符。 空白字符 还是不能在模式的特殊字符序列中出现，比如序列 (?( 引入了一个条件子组(译注: 这种语法定义的 特殊字符序列中如果出现空白字符会导致编译错误。 比如(?(就会导致错误)。</span><em class="emphasis" style="text-rendering: optimizelegibility;">A</em>&nbsp;(<em style="text-rendering: optimizelegibility;">PCRE_ANCHORED</em>)</dd><dd style="margin: 0px 0px 1.5rem; padding: 0px 1.5rem; color: rgb(51, 51, 51); font-family: 'Fira Sans', 'Source Sans Pro', Helvetica, Arial, sans-serif; font-size: 16px; line-height: 24px; background-color: rgb(242, 242, 242);"><span class="simpara">如果设置了这个修饰符，模式被强制为"锚定"模式，也就是说约束匹配使其仅从 目标字符串的开始位置搜索。这个效果同样可以使用适当的模式构造出来，并且 这也是 perl 种实现这种模式的唯一途径。</span></dd><dt style="color: rgb(51, 51, 51); font-family: 'Fira Sans', 'Source Sans Pro', Helvetica, Arial, sans-serif; font-size: 16px; line-height: 24px; background-color: rgb(242, 242, 242);"><em class="emphasis" style="text-rendering: optimizelegibility;">D</em>&nbsp;(<em style="text-rendering: optimizelegibility;">PCRE_DOLLAR_ENDONLY</em>)</dt><dd style="margin: 0px 0px 1.5rem; padding: 0px 1.5rem; color: rgb(51, 51, 51); font-family: 'Fira Sans', 'Source Sans Pro', Helvetica, Arial, sans-serif; font-size: 16px; line-height: 24px; background-color: rgb(242, 242, 242);"><span class="simpara">如果这个修饰符被设置，模式中的元字符美元符号仅仅匹配目标字符串的末尾。如果这个修饰符 没有设置，当字符串以一个换行符结尾时， 美元符号还会匹配该换行符(但不会匹配之前的任何换行符)。 如果设置了修饰符<em class="emphasis" style="text-rendering: optimizelegibility;">m</em>，这个修饰符被忽略. 在 perl 中没有与此修饰符等同的修饰符。</span></dd><dt style="color: rgb(51, 51, 51); font-family: 'Fira Sans', 'Source Sans Pro', Helvetica, Arial, sans-serif; font-size: 16px; line-height: 24px; background-color: rgb(242, 242, 242);"><em class="emphasis" style="text-rendering: optimizelegibility;">S</em></dt><dd style="margin: 0px 0px 1.5rem; padding: 0px 1.5rem; color: rgb(51, 51, 51); font-family: 'Fira Sans', 'Source Sans Pro', Helvetica, Arial, sans-serif; font-size: 16px; line-height: 24px; background-color: rgb(242, 242, 242);"><span class="simpara">当一个模式需要多次使用的时候，为了得到匹配速度的提升，值得花费一些时间 对其进行一些额外的分析。如果设置了这个修饰符，这个额外的分析就会执行。当前， 这种对一个模式的分析仅仅适用于非锚定模式的匹配(即没有单独的固定开始字符)。</span></dd><dt style="color: rgb(51, 51, 51); font-family: 'Fira Sans', 'Source Sans Pro', Helvetica, Arial, sans-serif; font-size: 16px; line-height: 24px; background-color: rgb(242, 242, 242);"><em class="emphasis" style="text-rendering: optimizelegibility;">U</em>&nbsp;(<em style="text-rendering: optimizelegibility;">PCRE_UNGREEDY</em>)</dt><dd style="margin: 0px 0px 1.5rem; padding: 0px 1.5rem; color: rgb(51, 51, 51); font-family: 'Fira Sans', 'Source Sans Pro', Helvetica, Arial, sans-serif; font-size: 16px; line-height: 24px; background-color: rgb(242, 242, 242);"><span class="simpara">这个修饰符逆转了量词的"贪婪"模式。 使量词默认为非贪婪的，通过量词后紧跟<em style="text-rendering: optimizelegibility;">?</em>&nbsp;的方式可以使其成为贪婪的。这和 perl 是不兼容的。 它同样可以使用&nbsp;<a href="http://php.net/manual/zh/regexp.reference.internal-options.php" class="link" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">模式内修饰符设置</a>&nbsp;(<em style="text-rendering: optimizelegibility;">?U</em>)进行设置， 或者在量词后以问号标记其非贪婪(比如<em style="text-rendering: optimizelegibility;">.*?</em>)。</span><blockquote class="note" style="margin-top: 1.5rem; margin-bottom: 1.5rem; padding: 0.75rem; overflow: hidden; border-color: rgb(204, 204, 204); box-shadow: rgba(0, 0, 0, 0.14902) 0px 0px 0px 1px inset; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; background-color: rgb(230, 230, 230);"><p><strong class="note" style="text-rendering: optimizelegibility; font-weight: 500; font-size: 1.125rem;">Note</strong>:</p><p class="para">在非贪婪模式，通常不能匹配超过&nbsp;<a href="http://php.net/manual/zh/pcre.configuration.php#ini.pcre.backtrack-limit" class="link" style="border-bottom-width: 1px; border-bottom-style: solid; text-decoration: none; color: rgb(51, 102, 153);">pcre.backtrack_limit</a>&nbsp;的字符。</p></blockquote></dd><dt style="color: rgb(51, 51, 51); font-family: 'Fira Sans', 'Source Sans Pro', Helvetica, Arial, sans-serif; font-size: 16px; line-height: 24px; background-color: rgb(242, 242, 242);"><em class="emphasis" style="text-rendering: optimizelegibility;">X</em>&nbsp;(<em style="text-rendering: optimizelegibility;">PCRE_EXTRA</em>)</dt><dd style="margin: 0px 0px 1.5rem; padding: 0px 1.5rem; color: rgb(51, 51, 51); font-family: 'Fira Sans', 'Source Sans Pro', Helvetica, Arial, sans-serif; font-size: 16px; line-height: 24px; background-color: rgb(242, 242, 242);"><span class="simpara">这个修饰符打开了 PCRE 与 perl 不兼容的附件功能。模式中的任意反斜线后就 ingen 一个 没有特殊含义的字符都会导致一个错误，以此保留这些字符以保证向后兼容性。 默认情况下，在 perl 中，反斜线紧跟一个没有特殊含义的字符被认为是该字符的原文。 当前没有其他特性由这个修饰符控制。</span></dd><dt style="color: rgb(51, 51, 51); font-family: 'Fira Sans', 'Source Sans Pro', Helvetica, Arial, sans-serif; font-size: 16px; line-height: 24px; background-color: rgb(242, 242, 242);"><em class="emphasis" style="text-rendering: optimizelegibility;">J</em>&nbsp;(<em style="text-rendering: optimizelegibility;">PCRE_INFO_JCHANGED</em>)</dt><dd style="margin: 0px 0px 1.5rem; padding: 0px 1.5rem; color: rgb(51, 51, 51); font-family: 'Fira Sans', 'Source Sans Pro', Helvetica, Arial, sans-serif; font-size: 16px; line-height: 24px; background-color: rgb(242, 242, 242);"><span class="simpara">内部选项设置(?J)修改本地的<em style="text-rendering: optimizelegibility;">PCRE_DUPNAMES</em>选项。允许子组重名， (译注：只能通过内部选项设置，外部的 /J 设置会产生错误。)</span></dd><dt style="color: rgb(51, 51, 51); font-family: 'Fira Sans', 'Source Sans Pro', Helvetica, Arial, sans-serif; font-size: 16px; line-height: 24px; background-color: rgb(242, 242, 242);"><em class="emphasis" style="text-rendering: optimizelegibility;">u</em>&nbsp;(<em style="text-rendering: optimizelegibility;">PCRE_UTF8</em>)</dt><dd style="margin: 0px 0px 1.5rem; padding: 0px 1.5rem; color: rgb(51, 51, 51); font-family: 'Fira Sans', 'Source Sans Pro', Helvetica, Arial, sans-serif; font-size: 16px; line-height: 24px; background-color: rgb(242, 242, 242);"><span class="simpara">此修正符打开一个与 perl 不兼容的附加功能。 模式字符串被认为是utf-8的. 这个修饰符 从 unix 版php 4.1.0 或更高，win32版 php 4.2.3 开始可用。 php 4.3.5 开始检查模式的 utf-8 合法性。</span></dd><div style="color:gray"><small><a href="http://php.net/manual/zh/reference.pcre.pattern.modifiers.php"></a></small></div></div></body></html>